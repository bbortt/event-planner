plugins {
    id "io.spring.dependency-management" version "1.1.0"
    id "jacoco"
    id "java"
    id "org.flywaydb.flyway"
    id "org.openapi.generator"
    id "org.sonarqube"
    id "org.springframework.boot" version "2.7.5"
    id "org.springframework.experimental.aot" version "0.12.2"
}

sourceCompatibility = "17"
assert System.properties["java.specification.version"] == "17"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/release" }
}

def openFeignVersion = "12.1"
def resilience4jVersion = "2.0.2"

dependencies {
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:2021.0.5")
    implementation project(":libs:common-java")
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation "io.github.openfeign:feign-jackson:${openFeignVersion}"
    implementation "io.github.openfeign:feign-okhttp:${openFeignVersion}"
    implementation "io.github.resilience4j:resilience4j-spring-boot2:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-feign:${resilience4jVersion}"
    implementation "com.github.scribejava:scribejava-core:8.3.3"
    implementation "io.swagger:swagger-annotations:1.6.9"
    implementation "io.swagger.core.v3:swagger-annotations:2.2.7"
    implementation "jakarta.validation:jakarta.validation-api:2.0.2"
    implementation "org.apache.commons:commons-lang3:3.12.0"
    implementation "org.openapitools:jackson-databind-nullable:0.2.4"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    runtimeOnly "com.h2database:h2"
    runtimeOnly "org.postgresql:postgresql"
    testImplementation "org.bitbucket.b_c:jose4j:0.9.2"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.cloud:spring-cloud-contract-wiremock"
    testImplementation "org.springframework.security:spring-security-test"
}

task generateProjectsServiceApi(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask){
    generatorName = "spring"
    inputSpec = "${project.rootDir}/specs/projects-service-v1.yml".toString()
    outputDir = "${project.buildDir}/generated-sources/projects-service".toString()
    apiPackage = "io.github.bbortt.event.planner.apps.projects.v1.rest"
    invokerPackage = "io.github.bbortt.event.planner.apps.projects.v1"
    modelNameSuffix = "Dto"
    modelPackage = "io.github.bbortt.event.planner.apps.projects.v1.dto"
    configOptions = [
            dateLibrary    : "java8",
            delegatePattern: "true",
            interfaceOnly  : "true",
            useOptional    : "true",
            useTags        : "true"
    ]
}
compileJava.dependsOn tasks.generateProjectsServiceApi
sourceSets.main.java.srcDirs += "${project.buildDir}/generated-sources/projects-service/src/main/java"

task generatePermissionsServiceClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask){
    generatorName = "java"
    library = "feign"
    inputSpec = "${project.rootDir}/specs/permissions-service-v1.yml".toString()
    outputDir = "${project.buildDir}/generated-sources/permissions-service".toString()
    apiPackage = "io.github.bbortt.event.planner.apps.projects.system.model.rest.v1"
    invokerPackage = "io.github.bbortt.event.planner.apps.projects.system.model.rest"
    modelNameSuffix = "Dto"
    modelPackage = "io.github.bbortt.event.planner.apps.projects.system.model.rest.v1.dto"
    configOptions = [
            dateLibrary      : "java8",
            delegatePattern  : "true",
            interfaceOnly    : "true",
            useOptional      : "true",
    ]
}
compileJava.dependsOn tasks.generatePermissionsServiceClient
sourceSets.main.java.srcDirs += "${project.buildDir}/generated-sources/permissions-service/src/main/java"

flyway {
    locations = ["filesystem:src/main/resources/db/migration"]
}

task flywayMigrateDev(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
    url = "jdbc:postgresql://localhost:5432/event_planner"
    user = "event_planner"
    password = "event_planner_password"
    defaultSchema = "projects_service"
}

task flywayMigrateTest(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
    url = "jdbc:postgresql://localhost:5432/event_planner_test"
    user = "event_planner"
    password = "event_planner_password"
    defaultSchema = "projects_service"
}

task flywayCleanTest(type: org.flywaydb.gradle.task.FlywayCleanTask) {
    url = "jdbc:postgresql://localhost:5432/event_planner_test"
    user = "event_planner"
    password = "event_planner_password"
    defaultSchema = "projects_service"
}

apply from: "gradle/native.gradle"
apply from: "gradle/sonar.gradle"
