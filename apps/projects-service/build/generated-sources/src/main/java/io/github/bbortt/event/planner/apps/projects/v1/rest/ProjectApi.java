/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.github.bbortt.event.planner.apps.projects.v1.rest;

import java.math.BigDecimal;
import io.github.bbortt.event.planner.apps.projects.v1.dto.ProjectDto;
import io.github.bbortt.event.planner.apps.projects.v1.dto.ReadProjects200ResponseDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-10-08T16:49:31.140405563+02:00[Europe/Zurich]")
@Validated
@Tag(name = "Project", description = "Project resource.")
@RequestMapping("${openapi.eventPlanner.base-path:/api/rest}")
public interface ProjectApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /v1/projects : Create a new project.
     * A new project can be created by all users having the &#x60;restapi:access&#x60; role. All registered users hould receive this role by default. 
     *
     * @param projectDto  (optional)
     * @return CREATED (status code 201)
     *         or BAD REQUEST (status code 400)
     */
    @Operation(
        operationId = "createProject",
        summary = "Create a new project.",
        tags = { "project" },
        responses = {
            @ApiResponse(responseCode = "201", description = "CREATED", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "BAD REQUEST")
        },
        security = {
            @SecurityRequirement(name = "user_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/projects",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ProjectDto> _createProject(
        @Parameter(name = "ProjectDto", description = "") @Valid @RequestBody(required = false) ProjectDto projectDto
    ) {
        return createProject(projectDto);
    }

    // Override this methodRestController
    default  ResponseEntity<ProjectDto> createProject(ProjectDto projectDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"endDate\" : \"2000-01-23\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0.8008281904610115, \"startDate\" : \"2000-01-23\", \"token\" : \"token\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/projects/{projectId} : Receive the project identified by the given &#x60;projectId&#x60;.
     * This will only return the project identified by &#x60;projectId&#x60; and only if the user is a member of it. This can only be done by the users having the &#x60;restapi:access&#x60; role. All registered users hould receive this role by default. 
     *
     * @param projectId  (required)
     * @return OK (status code 200)
     *         or NO CONTENT (status code 204)
     */
    @Operation(
        operationId = "readProjectById",
        summary = "Receive the project identified by the given `projectId`.",
        tags = { "project" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectDto.class))
            }),
            @ApiResponse(responseCode = "204", description = "NO CONTENT")
        },
        security = {
            @SecurityRequirement(name = "user_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/projects/{projectId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ProjectDto> _readProjectById(
        @Parameter(name = "projectId", description = "", required = true) @PathVariable("projectId") BigDecimal projectId
    ) {
        return readProjectById(projectId);
    }

    // Override this method
    default  ResponseEntity<ProjectDto> readProjectById(BigDecimal projectId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"endDate\" : \"2000-01-23\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0.8008281904610115, \"startDate\" : \"2000-01-23\", \"token\" : \"token\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/projects : Receive all projects to which the user has access to.
     * This will only return projects that are not archived. This can only be done by the users having the &#x60;restapi:access&#x60; role. All registered users hould receive this role by default. 
     *
     * @param pageSize Number of records to return. Must be greater than 0, else the default value of 10 will be used.  (optional)
     * @param pageNumber Start index for paging. (optional)
     * @param sort Attributes of the resource to sort by: A semicolon separated list. Each attribute can optionally be followed by the sorting direction, comma separated. Default is &#x60;id[,asc]&#x60;.  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "readProjects",
        summary = "Receive all projects to which the user has access to.",
        tags = { "project" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ReadProjects200ResponseDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/projects",
        produces = { "application/json" }
    )
    default ResponseEntity<ReadProjects200ResponseDto> _readProjects(
        @Parameter(name = "pageSize", description = "Number of records to return. Must be greater than 0, else the default value of 10 will be used. ") @Valid @RequestParam(value = "pageSize", required = false) Optional<BigDecimal> pageSize,
        @Parameter(name = "pageNumber", description = "Start index for paging.") @Valid @RequestParam(value = "pageNumber", required = false) Optional<BigDecimal> pageNumber,
        @Parameter(name = "sort", description = "Attributes of the resource to sort by: A semicolon separated list. Each attribute can optionally be followed by the sorting direction, comma separated. Default is `id[,asc]`. ") @Valid @RequestParam(value = "sort", required = false) Optional<String> sort
    ) {
        return readProjects(pageSize, pageNumber, sort);
    }

    // Override this method
    default  ResponseEntity<ReadProjects200ResponseDto> readProjects(Optional<BigDecimal> pageSize, Optional<BigDecimal> pageNumber, Optional<String> sort) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
