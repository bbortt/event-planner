(() => {
var exports = {};
exports.id = 327;
exports.ids = [327];
exports.modules = {

/***/ 430:
/***/ ((module) => {

// Exports
module.exports = {
	"pageTitle": "projects_pageTitle__L4v67",
	"controlButtonCol": "projects_controlButtonCol__u8bLo"
};


/***/ }),

/***/ 552:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "default": () => (/* binding */ projects),
  "getServerSideProps": () => (/* binding */ getServerSideProps)
});

// EXTERNAL MODULE: external "react/jsx-runtime"
var jsx_runtime_ = __webpack_require__(997);
// EXTERNAL MODULE: external "react"
var external_react_ = __webpack_require__(689);
// EXTERNAL MODULE: external "react-bootstrap"
var external_react_bootstrap_ = __webpack_require__(358);
// EXTERNAL MODULE: ./lib/runtime.ts
var runtime = __webpack_require__(105);
;// CONCATENATED MODULE: ./lib/models/PagingInformation.ts
/* tslint:disable */ /* eslint-disable */ /**
 * Event-Planner
 * The Event-Planner REST API definition
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: timon.borter@gmx.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ 
/**
 * Check if a given object implements the PagingInformation interface.
 */ function instanceOfPagingInformation(value) {
    let isInstance = true;
    return isInstance;
}
function PagingInformationFromJSON(json) {
    return PagingInformationFromJSONTyped(json, false);
}
function PagingInformationFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        "contents": !exists(json, "contents") ? undefined : json["contents"],
        "totalElements": !exists(json, "totalElements") ? undefined : json["totalElements"],
        "totalPages": !exists(json, "totalPages") ? undefined : json["totalPages"],
        "number": !exists(json, "number") ? undefined : json["number"]
    };
}
function PagingInformationToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        "contents": value.contents,
        "totalElements": value.totalElements,
        "totalPages": value.totalPages,
        "number": value.number
    };
}

;// CONCATENATED MODULE: ./lib/models/Project.ts
/* tslint:disable */ /* eslint-disable */ /**
 * Event-Planner
 * The Event-Planner REST API definition
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: timon.borter@gmx.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ 
/**
 * Check if a given object implements the Project interface.
 */ function instanceOfProject(value) {
    let isInstance = true;
    isInstance = isInstance && "token" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "startDate" in value;
    isInstance = isInstance && "endDate" in value;
    return isInstance;
}
function Project_ProjectFromJSON(json) {
    return ProjectFromJSONTyped(json, false);
}
function ProjectFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        "id": !(0,runtime/* exists */.Gg)(json, "id") ? undefined : json["id"],
        "token": json["token"],
        "name": json["name"],
        "description": !(0,runtime/* exists */.Gg)(json, "description") ? undefined : json["description"],
        "startDate": new Date(json["startDate"]),
        "endDate": new Date(json["endDate"])
    };
}
function Project_ProjectToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        "id": value.id,
        "token": value.token,
        "name": value.name,
        "description": value.description,
        "startDate": value.startDate.toISOString().substr(0, 10),
        "endDate": value.endDate.toISOString().substr(0, 10)
    };
}

;// CONCATENATED MODULE: ./lib/models/ReadProjects200Response.ts
/* tslint:disable */ /* eslint-disable */ /**
 * Event-Planner
 * The Event-Planner REST API definition
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: timon.borter@gmx.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ 

/**
 * Check if a given object implements the ReadProjects200Response interface.
 */ function instanceOfReadProjects200Response(value) {
    let isInstance = true;
    return isInstance;
}
function ReadProjects200ResponseFromJSON(json) {
    return ReadProjects200ResponseFromJSONTyped(json, false);
}
function ReadProjects200ResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        "contents": !(0,runtime/* exists */.Gg)(json, "contents") ? undefined : json["contents"].map(Project_ProjectFromJSON),
        "totalElements": !(0,runtime/* exists */.Gg)(json, "totalElements") ? undefined : json["totalElements"],
        "totalPages": !(0,runtime/* exists */.Gg)(json, "totalPages") ? undefined : json["totalPages"],
        "number": !(0,runtime/* exists */.Gg)(json, "number") ? undefined : json["number"]
    };
}
function ReadProjects200ResponseToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        "contents": value.contents === undefined ? undefined : value.contents.map(ProjectToJSON),
        "totalElements": value.totalElements,
        "totalPages": value.totalPages,
        "number": value.number
    };
}

;// CONCATENATED MODULE: ./lib/models/ReadProjects200ResponseAllOf.ts
/* tslint:disable */ /* eslint-disable */ /**
 * Event-Planner
 * The Event-Planner REST API definition
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: timon.borter@gmx.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ 

/**
 * Check if a given object implements the ReadProjects200ResponseAllOf interface.
 */ function instanceOfReadProjects200ResponseAllOf(value) {
    let isInstance = true;
    return isInstance;
}
function ReadProjects200ResponseAllOfFromJSON(json) {
    return ReadProjects200ResponseAllOfFromJSONTyped(json, false);
}
function ReadProjects200ResponseAllOfFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        "contents": !exists(json, "contents") ? undefined : json["contents"].map(ProjectFromJSON)
    };
}
function ReadProjects200ResponseAllOfToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        "contents": value.contents === undefined ? undefined : value.contents.map(ProjectToJSON)
    };
}

;// CONCATENATED MODULE: ./lib/models/index.ts
/* tslint:disable */ /* eslint-disable */ 




;// CONCATENATED MODULE: ./lib/apis/ProjectApi.ts
/* tslint:disable */ /* eslint-disable */ /**
 * Event-Planner
 * The Event-Planner REST API definition
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: timon.borter@gmx.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ 

/**
 * 
 */ class ProjectApi extends runtime/* BaseAPI */.T2 {
    /**
     * A new project can be created by all users having the `restapi:access` role. All registered users hould receive this role by default. 
     * Create a new project.
     */ async createProjectRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("user_auth", []);
        }
        const response = await this.request({
            path: `/v1/projects`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: Project_ProjectToJSON(requestParameters.project)
        }, initOverrides);
        return new runtime/* JSONApiResponse */.QG(response, (jsonValue)=>Project_ProjectFromJSON(jsonValue));
    }
    /**
     * A new project can be created by all users having the `restapi:access` role. All registered users hould receive this role by default. 
     * Create a new project.
     */ async createProject(requestParameters = {}, initOverrides) {
        const response = await this.createProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This will only return the project identified by `projectId` and only if the user is a member of it. This can only be done by the users having the `restapi:access` role. All registered users hould receive this role by default. 
     * Receive the project identified by the given `projectId`.
     */ async readProjectByIdRaw(requestParameters, initOverrides) {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime/* RequiredError */.IC("projectId", "Required parameter requestParameters.projectId was null or undefined when calling readProjectById.");
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("user_auth", []);
        }
        const response = await this.request({
            path: `/v1/projects/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
        }, initOverrides);
        return new runtime/* JSONApiResponse */.QG(response, (jsonValue)=>Project_ProjectFromJSON(jsonValue));
    }
    /**
     * This will only return the project identified by `projectId` and only if the user is a member of it. This can only be done by the users having the `restapi:access` role. All registered users hould receive this role by default. 
     * Receive the project identified by the given `projectId`.
     */ async readProjectById(requestParameters, initOverrides) {
        const response = await this.readProjectByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This will only return projects that are not archived. This can only be done by the users having the `restapi:access` role. All registered users hould receive this role by default. 
     * Receive all projects to which the user has access to.
     */ async readProjectsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.pageSize !== undefined) {
            queryParameters["pageSize"] = requestParameters.pageSize;
        }
        if (requestParameters.pageNumber !== undefined) {
            queryParameters["pageNumber"] = requestParameters.pageNumber;
        }
        if (requestParameters.sort !== undefined) {
            queryParameters["sort"] = requestParameters.sort;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("user_auth", []);
        }
        const response = await this.request({
            path: `/v1/projects`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
        }, initOverrides);
        return new runtime/* JSONApiResponse */.QG(response, (jsonValue)=>ReadProjects200ResponseFromJSON(jsonValue));
    }
    /**
     * This will only return projects that are not archived. This can only be done by the users having the `restapi:access` role. All registered users hould receive this role by default. 
     * Receive all projects to which the user has access to.
     */ async readProjects(requestParameters = {}, initOverrides) {
        const response = await this.readProjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }
}

;// CONCATENATED MODULE: ./lib/apis/index.ts
/* tslint:disable */ /* eslint-disable */ 

// EXTERNAL MODULE: ./lib/auth0.ts
var auth0 = __webpack_require__(842);
// EXTERNAL MODULE: ./lib/components/layout.tsx + 2 modules
var layout = __webpack_require__(80);
;// CONCATENATED MODULE: external "formik"
const external_formik_namespaceObject = require("formik");
;// CONCATENATED MODULE: ./lib/components/projects/create-project-form.tsx



const CreateProjectForm = ({ initialProject , setIsValid , setProject  })=>{
    const validateForm = (values)=>{
        const errors = {};
        if (values.name && values.name.length > 50) {
            errors.name = "Es Projekt muess \xe4 Nam\xe4 ha u d\xe4 darf maximal 50 Zeich\xe4 l\xe4ng si.";
        }
        if (values.description && values.description.length > 300) {
            errors.description = "Es Beschribig darf maximal 300 Zeich\xe4 l\xe4ng si.";
        }
        if (values.startDate && values.startDate < new Date()) {
            errors.startDate = "Es Projekt muess es Startdatum ir Zuekunft ha.";
        }
        if (values.endDate && values.endDate < new Date()) {
            errors.endDate = "Es Projekt muess es \xc4ndatum ir Zuekunft ha.";
        }
        if (values.endDate && values.startDate && values.endDate < values.startDate) {
            errors.endDate = "Ds \xc4ndatum cha ned vorem Startdatum ligg\xe4.";
        }
        const isValid = !!values.name && !!values.startDate && !!values.endDate && Object.entries(errors).length === 0;
        if (isValid) {
            setProject({
                ...values,
                startDate: new Date(values.startDate),
                endDate: new Date(values.endDate)
            });
        }
        setIsValid(isValid);
        return errors;
    };
    return /*#__PURE__*/ jsx_runtime_.jsx(external_formik_namespaceObject.Formik, {
        initialValues: initialProject ? initialProject : {
            name: "",
            description: "",
            startDate: new Date(),
            endDate: new Date()
        },
        validate: validateForm,
        onSubmit: ()=>{
        /* this is handled in super-component! */ },
        children: ({ values , touched , isValid , errors  })=>/*#__PURE__*/ (0,jsx_runtime_.jsxs)(external_react_bootstrap_.Form, {
                noValidate: true,
                children: [
                    /*#__PURE__*/ jsx_runtime_.jsx(external_formik_namespaceObject.Field, {
                        name: "name",
                        children: ({ field , form: { errors , touched  }  })=>/*#__PURE__*/ (0,jsx_runtime_.jsxs)(external_react_bootstrap_.Form.Group, {
                                className: "mb-3",
                                controlId: "name",
                                children: [
                                    /*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Form.Label, {
                                        children: "Nam\xe4"
                                    }),
                                    /*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Form.Control, {
                                        required: true,
                                        type: "text",
                                        placeholder: "Nam\xe4 f\xfcrs Projekt",
                                        ...field,
                                        isValid: touched.name && !errors.name,
                                        isInvalid: touched.name && !!errors.name,
                                        autoFocus: true
                                    }),
                                    /*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Form.Control.Feedback, {
                                        type: "invalid",
                                        children: errors.name
                                    })
                                ]
                            })
                    }),
                    /*#__PURE__*/ jsx_runtime_.jsx(external_formik_namespaceObject.Field, {
                        name: "description",
                        children: ({ field , form: { errors , touched  }  })=>/*#__PURE__*/ (0,jsx_runtime_.jsxs)(external_react_bootstrap_.Form.Group, {
                                className: "mb-3",
                                controlId: "description",
                                children: [
                                    /*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Form.Label, {
                                        children: "Beschribig"
                                    }),
                                    /*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Form.Control, {
                                        required: true,
                                        type: "text",
                                        as: "textarea",
                                        placeholder: "\xc4 optionali Beschribig",
                                        ...field,
                                        isValid: touched.description && !errors.description,
                                        isInvalid: touched.description && !!errors.description
                                    }),
                                    /*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Form.Control.Feedback, {
                                        type: "invalid",
                                        children: errors.description
                                    })
                                ]
                            })
                    }),
                    /*#__PURE__*/ jsx_runtime_.jsx(external_formik_namespaceObject.Field, {
                        name: "startDate",
                        children: ({ field , form: { errors , touched  }  })=>/*#__PURE__*/ (0,jsx_runtime_.jsxs)(external_react_bootstrap_.Form.Group, {
                                className: "mb-3",
                                controlId: "startDate",
                                children: [
                                    /*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Form.Label, {
                                        children: "Start Datum"
                                    }),
                                    /*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Form.Control, {
                                        required: true,
                                        type: "date",
                                        ...field,
                                        isValid: touched.startDate && !errors.startDate,
                                        isInvalid: touched.startDate && !!errors.startDate
                                    }),
                                    /*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Form.Control.Feedback, {
                                        type: "invalid",
                                        children: errors.startDate
                                    })
                                ]
                            })
                    }),
                    /*#__PURE__*/ jsx_runtime_.jsx(external_formik_namespaceObject.Field, {
                        name: "endDate",
                        children: ({ field , form: { errors , touched  }  })=>/*#__PURE__*/ (0,jsx_runtime_.jsxs)(external_react_bootstrap_.Form.Group, {
                                className: "mb-3",
                                controlId: "endDate",
                                children: [
                                    /*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Form.Label, {
                                        children: "\xc4nd Datum"
                                    }),
                                    /*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Form.Control, {
                                        required: true,
                                        type: "date",
                                        ...field,
                                        isValid: touched.endDate && !errors.endDate,
                                        isInvalid: touched.endDate && !!errors.endDate
                                    }),
                                    /*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Form.Control.Feedback, {
                                        type: "invalid",
                                        children: errors.endDate
                                    })
                                ]
                            })
                    })
                ]
            })
    });
};
/* harmony default export */ const create_project_form = (CreateProjectForm); // description?: string;
 // /**
 //  *
 //  * @type {Date}
 //  * @memberof Project
 //  */
 // startDate: Date;
 // /**
 //  *
 //  * @type {Date}
 //  * @memberof Project
 //  */
 // endDate: Date;

;// CONCATENATED MODULE: ./lib/components/projects/new-project-modal.tsx






const NewProjectModal = ({ handleVisibilityChange , setErrorMessage , show  })=>{
    const [isValid, setIsValid] = (0,external_react_.useState)(false);
    const [project, setProject] = (0,external_react_.useState)({});
    const saveProject = async ()=>{
        if (!isValid) {
            return;
        }
        (0,auth0/* wrapWithContext */.Rn)((configuration)=>new ProjectApi(configuration)).createProject({
            project
        }).then((createdProject)=>handleVisibilityChange(createdProject), (_)=>{
            setErrorMessage("Ha das Projekt leider ned ch\xf6nne kreir\xe4 - irgendwo ischmer e F\xe4hler passiert. Probiers doch no eis!");
            handleVisibilityChange();
        });
    };
    return /*#__PURE__*/ (0,jsx_runtime_.jsxs)(external_react_bootstrap_.Modal, {
        show: show,
        onHide: ()=>handleVisibilityChange(),
        children: [
            /*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Modal.Header, {
                closeButton: true,
                children: /*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Modal.Title, {
                    children: "Neus Projekt erstell\xe4"
                })
            }),
            /*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Modal.Body, {
                children: /*#__PURE__*/ jsx_runtime_.jsx(create_project_form, {
                    setIsValid: setIsValid,
                    setProject: setProject
                })
            }),
            /*#__PURE__*/ (0,jsx_runtime_.jsxs)(external_react_bootstrap_.Modal.Footer, {
                children: [
                    /*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Button, {
                        variant: "warning",
                        onClick: ()=>handleVisibilityChange(),
                        children: "Abbr\xe4che"
                    }),
                    /*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Button, {
                        variant: "success",
                        disabled: !isValid,
                        onClick: ()=>saveProject(),
                        children: "Spicher\xe4"
                    })
                ]
            })
        ]
    });
};
/* harmony default export */ const new_project_modal = (NewProjectModal);

;// CONCATENATED MODULE: ./lib/components/pageable-list.tsx


function paginationItems(currentPage, totalPages) {
    let items = [];
    for(let number = 1; number <= totalPages; number++){
        items.push(/*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Pagination.Item, {
            active: number === currentPage,
            children: number
        }, number));
        return items;
    }
}
const PageableList = ({ children , number , totalPages  })=>{
    return /*#__PURE__*/ (0,jsx_runtime_.jsxs)(jsx_runtime_.Fragment, {
        children: [
            children,
            /*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Pagination, {
                children: paginationItems(number, totalPages)
            })
        ]
    });
};
/* harmony default export */ const pageable_list = (PageableList);

;// CONCATENATED MODULE: ./lib/components/projects/list/index.tsx

const ProjectList = ({ projects  })=>{
    return /*#__PURE__*/ jsx_runtime_.jsx(jsx_runtime_.Fragment, {
        children: JSON.stringify(projects)
    });
};
/* harmony default export */ const list = (ProjectList);

;// CONCATENATED MODULE: ./lib/constants.ts
const DEFAULT_PAGE_SIZE = 10;

// EXTERNAL MODULE: ./pages/projects.module.scss
var projects_module = __webpack_require__(430);
var projects_module_default = /*#__PURE__*/__webpack_require__.n(projects_module);
;// CONCATENATED MODULE: ./pages/projects.tsx












const Projects = ({ user , contents , number , totalPages , error  })=>{
    const [showModal, setShowModal] = (0,external_react_.useState)(false);
    const [errorMessage, setErrorMessage] = (0,external_react_.useState)(error);
    const handleVisibilityChange = (project)=>{
        setShowModal(!showModal);
        if (project) {
            console.log("route to project: ", project);
        }
    };
    return /*#__PURE__*/ (0,jsx_runtime_.jsxs)(layout/* default */.Z, {
        user: user,
        children: [
            /*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Container, {
                children: /*#__PURE__*/ (0,jsx_runtime_.jsxs)(external_react_bootstrap_.Row, {
                    className: "align-items-center",
                    children: [
                        /*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Col, {
                            md: 10,
                            children: /*#__PURE__*/ jsx_runtime_.jsx("h1", {
                                className: (projects_module_default()).pageTitle,
                                children: "Projekt"
                            })
                        }),
                        /*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Col, {
                            md: 2,
                            children: /*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Button, {
                                variant: "primary",
                                className: "w-100",
                                onClick: ()=>handleVisibilityChange(),
                                children: "Neus Projekt"
                            })
                        })
                    ]
                })
            }),
            /*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Alert, {
                variant: "danger",
                show: !!errorMessage,
                onClose: ()=>setErrorMessage(undefined),
                dismissible: true,
                children: errorMessage
            }, "failed-to-fetch-data"),
            contents?.length === 0 ? /*#__PURE__*/ jsx_runtime_.jsx(external_react_bootstrap_.Alert, {
                variant: "warning",
                children: "Du bisch no ken\xe4 Projekt bitr\xe4tte..."
            }, "no-projects-present") : /*#__PURE__*/ jsx_runtime_.jsx(pageable_list, {
                number: number || 1,
                totalPages: totalPages || 1,
                children: /*#__PURE__*/ jsx_runtime_.jsx(list, {
                    projects: contents || []
                })
            }),
            /*#__PURE__*/ jsx_runtime_.jsx(new_project_modal, {
                show: showModal,
                handleVisibilityChange: handleVisibilityChange,
                setErrorMessage: setErrorMessage
            })
        ]
    });
};
const getProjects = async (pageSize, pageNumber, accessToken)=>new ProjectApi().readProjects({
        pageSize,
        pageNumber
    }, async ({ context  })=>{
        if (accessToken) {
            context.headers["Authorization"] = `Bearer ${accessToken}`;
        }
        return context;
    });
const getServerSideProps = auth0/* default.withPageAuthRequired */.ZP.withPageAuthRequired({
    returnTo: "/projects",
    async getServerSideProps ({ req , res  }) {
        let response = {
            contents: []
        };
        let error = "";
        try {
            const accessToken = await (0,auth0/* getAccessToken */.hP)(req, res, "http://localhost:8081", [
                "restapi:access"
            ]);
            response = await getProjects(DEFAULT_PAGE_SIZE, 1, accessToken);
        } catch (e) {
            error = "I ha Problem d Projekt ds lad\xe4. Versuechs doch nomal!";
        }
        return {
            props: {
                ...response,
                contents: (response.contents || []).map((project)=>Project_ProjectToJSON(project)),
                error
            }
        };
    }
});
/* harmony default export */ const projects = (Projects);


/***/ }),

/***/ 93:
/***/ ((module) => {

"use strict";
module.exports = require("@auth0/nextjs-auth0");

/***/ }),

/***/ 968:
/***/ ((module) => {

"use strict";
module.exports = require("next/head");

/***/ }),

/***/ 689:
/***/ ((module) => {

"use strict";
module.exports = require("react");

/***/ }),

/***/ 358:
/***/ ((module) => {

"use strict";
module.exports = require("react-bootstrap");

/***/ }),

/***/ 997:
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-runtime");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, [714], () => (__webpack_exec__(552)));
module.exports = __webpack_exports__;

})();