"use strict";
(() => {
var exports = {};
exports.id = 805;
exports.ids = [805];
exports.modules = {

/***/ 93:
/***/ ((module) => {

module.exports = require("@auth0/nextjs-auth0");

/***/ }),

/***/ 52:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "default": () => (/* binding */ v1_projects)
});

// EXTERNAL MODULE: ./lib/auth0.ts
var auth0 = __webpack_require__(361);
// EXTERNAL MODULE: ./lib/runtime.ts
var runtime = __webpack_require__(746);
;// CONCATENATED MODULE: ./lib/models/PagingInformation.ts
/* tslint:disable */ /* eslint-disable */ /**
 * Event-Planner
 * The Event-Planner REST API definition
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: timon.borter@gmx.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ 
/**
 * Check if a given object implements the PagingInformation interface.
 */ function instanceOfPagingInformation(value) {
    let isInstance = true;
    return isInstance;
}
function PagingInformationFromJSON(json) {
    return PagingInformationFromJSONTyped(json, false);
}
function PagingInformationFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        "contents": !exists(json, "contents") ? undefined : json["contents"],
        "totalElements": !exists(json, "totalElements") ? undefined : json["totalElements"],
        "totalPages": !exists(json, "totalPages") ? undefined : json["totalPages"],
        "number": !exists(json, "number") ? undefined : json["number"]
    };
}
function PagingInformationToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        "contents": value.contents,
        "totalElements": value.totalElements,
        "totalPages": value.totalPages,
        "number": value.number
    };
}

;// CONCATENATED MODULE: ./lib/models/Project.ts
/* tslint:disable */ /* eslint-disable */ /**
 * Event-Planner
 * The Event-Planner REST API definition
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: timon.borter@gmx.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ 
/**
 * Check if a given object implements the Project interface.
 */ function instanceOfProject(value) {
    let isInstance = true;
    isInstance = isInstance && "token" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "startDate" in value;
    isInstance = isInstance && "endDate" in value;
    return isInstance;
}
function Project_ProjectFromJSON(json) {
    return ProjectFromJSONTyped(json, false);
}
function ProjectFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        "id": !(0,runtime/* exists */.Gg)(json, "id") ? undefined : json["id"],
        "token": json["token"],
        "name": json["name"],
        "description": !(0,runtime/* exists */.Gg)(json, "description") ? undefined : json["description"],
        "startDate": new Date(json["startDate"]),
        "endDate": new Date(json["endDate"])
    };
}
function Project_ProjectToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        "id": value.id,
        "token": value.token,
        "name": value.name,
        "description": value.description,
        "startDate": value.startDate.toISOString().substr(0, 10),
        "endDate": value.endDate.toISOString().substr(0, 10)
    };
}

;// CONCATENATED MODULE: ./lib/models/ReadProjects200Response.ts
/* tslint:disable */ /* eslint-disable */ /**
 * Event-Planner
 * The Event-Planner REST API definition
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: timon.borter@gmx.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ 

/**
 * Check if a given object implements the ReadProjects200Response interface.
 */ function instanceOfReadProjects200Response(value) {
    let isInstance = true;
    return isInstance;
}
function ReadProjects200ResponseFromJSON(json) {
    return ReadProjects200ResponseFromJSONTyped(json, false);
}
function ReadProjects200ResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        "contents": !(0,runtime/* exists */.Gg)(json, "contents") ? undefined : json["contents"].map(Project_ProjectFromJSON),
        "totalElements": !(0,runtime/* exists */.Gg)(json, "totalElements") ? undefined : json["totalElements"],
        "totalPages": !(0,runtime/* exists */.Gg)(json, "totalPages") ? undefined : json["totalPages"],
        "number": !(0,runtime/* exists */.Gg)(json, "number") ? undefined : json["number"]
    };
}
function ReadProjects200ResponseToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        "contents": value.contents === undefined ? undefined : value.contents.map(ProjectToJSON),
        "totalElements": value.totalElements,
        "totalPages": value.totalPages,
        "number": value.number
    };
}

;// CONCATENATED MODULE: ./lib/models/ReadProjects200ResponseAllOf.ts
/* tslint:disable */ /* eslint-disable */ /**
 * Event-Planner
 * The Event-Planner REST API definition
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: timon.borter@gmx.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ 

/**
 * Check if a given object implements the ReadProjects200ResponseAllOf interface.
 */ function instanceOfReadProjects200ResponseAllOf(value) {
    let isInstance = true;
    return isInstance;
}
function ReadProjects200ResponseAllOfFromJSON(json) {
    return ReadProjects200ResponseAllOfFromJSONTyped(json, false);
}
function ReadProjects200ResponseAllOfFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        "contents": !exists(json, "contents") ? undefined : json["contents"].map(ProjectFromJSON)
    };
}
function ReadProjects200ResponseAllOfToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        "contents": value.contents === undefined ? undefined : value.contents.map(ProjectToJSON)
    };
}

;// CONCATENATED MODULE: ./lib/models/index.ts
/* tslint:disable */ /* eslint-disable */ 




;// CONCATENATED MODULE: ./lib/apis/ProjectApi.ts
/* tslint:disable */ /* eslint-disable */ /**
 * Event-Planner
 * The Event-Planner REST API definition
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: timon.borter@gmx.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ 

/**
 * 
 */ class ProjectApi extends runtime/* BaseAPI */.T2 {
    /**
     * A new project can be created by all users having the `restapi:access` role. All registered users hould receive this role by default. 
     * Create a new project.
     */ async createProjectRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("user_auth", []);
        }
        const response = await this.request({
            path: `/v1/projects`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: Project_ProjectToJSON(requestParameters.project)
        }, initOverrides);
        return new runtime/* JSONApiResponse */.QG(response, (jsonValue)=>Project_ProjectFromJSON(jsonValue));
    }
    /**
     * A new project can be created by all users having the `restapi:access` role. All registered users hould receive this role by default. 
     * Create a new project.
     */ async createProject(requestParameters = {}, initOverrides) {
        const response = await this.createProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This will only return the project identified by `projectId` and only if the user is a member of it. This can only be done by the users having the `restapi:access` role. All registered users hould receive this role by default. 
     * Receive the project identified by the given `projectId`.
     */ async readProjectByIdRaw(requestParameters, initOverrides) {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime/* RequiredError */.IC("projectId", "Required parameter requestParameters.projectId was null or undefined when calling readProjectById.");
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("user_auth", []);
        }
        const response = await this.request({
            path: `/v1/projects/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
        }, initOverrides);
        return new runtime/* JSONApiResponse */.QG(response, (jsonValue)=>Project_ProjectFromJSON(jsonValue));
    }
    /**
     * This will only return the project identified by `projectId` and only if the user is a member of it. This can only be done by the users having the `restapi:access` role. All registered users hould receive this role by default. 
     * Receive the project identified by the given `projectId`.
     */ async readProjectById(requestParameters, initOverrides) {
        const response = await this.readProjectByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This will only return projects that are not archived. This can only be done by the users having the `restapi:access` role. All registered users hould receive this role by default. 
     * Receive all projects to which the user has access to.
     */ async readProjectsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.pageSize !== undefined) {
            queryParameters["pageSize"] = requestParameters.pageSize;
        }
        if (requestParameters.pageNumber !== undefined) {
            queryParameters["pageNumber"] = requestParameters.pageNumber;
        }
        if (requestParameters.sort !== undefined) {
            queryParameters["sort"] = requestParameters.sort;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("user_auth", []);
        }
        const response = await this.request({
            path: `/v1/projects`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
        }, initOverrides);
        return new runtime/* JSONApiResponse */.QG(response, (jsonValue)=>ReadProjects200ResponseFromJSON(jsonValue));
    }
    /**
     * This will only return projects that are not archived. This can only be done by the users having the `restapi:access` role. All registered users hould receive this role by default. 
     * Receive all projects to which the user has access to.
     */ async readProjects(requestParameters = {}, initOverrides) {
        const response = await this.readProjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }
}

;// CONCATENATED MODULE: ./lib/apis/index.ts
/* tslint:disable */ /* eslint-disable */ 

;// CONCATENATED MODULE: ./pages/api/rest/v1/projects.ts



const createProject = async (project, accessToken)=>await new ProjectApi().createProject({
        project
    }, async ({ context  })=>({
            headers: {
                ...context.headers,
                Authorization: `bearer ${accessToken}`
            }
        }));
const projects = auth0/* default.withApiAuthRequired */.ZP.withApiAuthRequired(async (req, res)=>{
    if (req.method !== "POST") {
        return res.status(405);
    }
    try {
        const accessToken = await (0,auth0/* getAccessToken */.hP)(req, res, "http://localhost:8081", [
            "restapi:access"
        ]);
        let project = Project_ProjectFromJSON(req.body);
        project = await createProject(project, accessToken);
        res.status(201).json(project);
    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : "Internal server error";
        // @ts-ignore
        res.status(error.response?.status).end(errorMessage);
    }
});
/* harmony default export */ const v1_projects = (projects);


/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, [361], () => (__webpack_exec__(52)));
module.exports = __webpack_exports__;

})();