/* tslint:disable */
/* eslint-disable */
/**
 * Event-Planner
 * The Event-Planner REST API definition
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: timon.borter@gmx.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { Project, ReadProjects200Response } from '../models';
import { ProjectFromJSON, ProjectToJSON, ReadProjects200ResponseFromJSON, ReadProjects200ResponseToJSON } from '../models';

export interface CreateProjectRequest {
  project?: Project;
}

/**
 *
 */
export class ProjectApi extends runtime.BaseAPI {
  /**
   * A new project can be created by all users having the `restapi:access` role. All registered users hould receive this role by default.
   * Create a new project.
   */
  async createProjectRaw(
    requestParameters: CreateProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Project>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken('user_auth', []);
    }

    const response = await this.request(
      {
        path: `/v1/projects`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ProjectToJSON(requestParameters.project),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => ProjectFromJSON(jsonValue));
  }

  /**
   * A new project can be created by all users having the `restapi:access` role. All registered users hould receive this role by default.
   * Create a new project.
   */
  async createProject(
    requestParameters: CreateProjectRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Project> {
    const response = await this.createProjectRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * This will only return projects that are not archived. This can only be done by the users having the `restapi:access` role. All registered users hould receive this role by default.
   * Receive all projects to which the user has access to.
   */
  async readProjectsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadProjects200Response>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken('user_auth', []);
    }

    const response = await this.request(
      {
        path: `/v1/projects`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => ReadProjects200ResponseFromJSON(jsonValue));
  }

  /**
   * This will only return projects that are not archived. This can only be done by the users having the `restapi:access` role. All registered users hould receive this role by default.
   * Receive all projects to which the user has access to.
   */
  async readProjects(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadProjects200Response> {
    const response = await this.readProjectsRaw(initOverrides);
    return await response.value();
  }
}
