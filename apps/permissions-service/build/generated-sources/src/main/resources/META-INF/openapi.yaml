openapi: 3.0.1
info:
  contact:
    email: timon.borter@gmx.ch
  description: The Event-Planner REST API definition
  license:
    name: Apache 2.0
    url: https://github.com/bbortt/event-planner/blob/release/LICENSE
  title: Event-Planner
  version: 1.0.0
servers:
- description: Localhost
  url: http://localhost:8080/api/rest
security:
- user_auth:
  - restapi:access
tags:
- description: Member resource.
  name: member
- description: Permission resource.
  name: permission
- description: Project resource.
  name: project
paths:
  /v1/members:
    post:
      description: |
        This will create the project administrator member. The administrator can
        do everything inside the project, regardles of his assigned permissions.
      operationId: createAdminMemberInProject
      parameters:
      - explode: true
        in: query
        name: auth0UserId
        required: true
        schema:
          maxLength: 64
          type: string
        style: form
      - explode: true
        in: query
        name: projectId
        required: true
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "201":
          description: Administrative member created
      security:
      - user_auth: []
      summary: Create the project administrator member.
      tags:
      - member
      x-accepts: application/json
      x-tags:
      - tag: member
  /v1/permissions:
    get:
      description: |
        This will only return permissions for projects that the given user
        has access to.
      operationId: readPermissionsByUserAndProject
      parameters:
      - explode: true
        in: query
        name: auth0UserId
        required: true
        schema:
          maxLength: 64
          type: string
        style: form
      - explode: true
        in: query
        name: projectId
        required: true
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - items:
                    type: string
                  type: array
          description: OK
      security:
      - user_auth: []
      summary: Receive a list of permissions for the given project and user ID.
      tags:
      - permission
      x-accepts: application/json
      x-tags:
      - tag: permission
  /v1/permissions/{permission}:
    delete:
      description: |
        This will revoke the permission user (not the calling user) in a certain
        project. An HTTP 403 response may be returned if the calling
        user does not have the right permission (`permission:revoke`).
      operationId: revokePermissionInProject
      parameters:
      - explode: false
        in: path
        name: permission
        required: true
        schema:
          maxLength: 20
          type: string
        style: simple
      - explode: true
        in: query
        name: auth0UserId
        required: true
        schema:
          maxLength: 64
          type: string
        style: form
      - explode: true
        in: query
        name: projectId
        required: true
        schema:
          format: int64
          type: integer
        style: form
      - explode: true
        in: query
        name: callingAuth0UserId
        required: true
        schema:
          maxLength: 64
          type: string
        style: form
      responses:
        "204":
          description: Permission revoked
        "403":
          description: User does not have the necessary permissions
      security:
      - user_auth: []
      summary: Revoke the given permission from a user in the project.
      tags:
      - permission
      x-accepts: application/json
      x-tags:
      - tag: permission
    put:
      description: |
        This will assign the permission to the given user (not the calling user)
        in a certain project. An HTTP 403 response may be returned if the calling
        user does not have the right permission (`permission:assign`).
      operationId: grantPermissionInProject
      parameters:
      - explode: false
        in: path
        name: permission
        required: true
        schema:
          maxLength: 20
          type: string
        style: simple
      - explode: true
        in: query
        name: auth0UserId
        required: true
        schema:
          maxLength: 64
          type: string
        style: form
      - explode: true
        in: query
        name: projectId
        required: true
        schema:
          format: int64
          type: integer
        style: form
      - explode: true
        in: query
        name: callingAuth0UserId
        required: true
        schema:
          maxLength: 64
          type: string
        style: form
      responses:
        "201":
          description: Permission assigned
        "403":
          description: User does not have the necessary permissions
      security:
      - user_auth: []
      summary: Assign the given permission to the project and user.
      tags:
      - permission
      x-accepts: application/json
      x-tags:
      - tag: permission
  /v1/projects:
    get:
      description: |
        This will only return IDs of projects that the given user has access to.
      operationId: readProjectIdsByMembership
      parameters:
      - explode: true
        in: query
        name: auth0UserId
        required: false
        schema:
          maxLength: 64
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/readProjectIdsByMembership_200_response'
          description: OK
      security:
      - user_auth: []
      summary: Receive a list of project IDs.
      tags:
      - project
      x-accepts: application/json
      x-tags:
      - tag: project
  /v1/projects/{projectId}/permissions:
    get:
      description: |
        This will indicate if the given user has any of the permissions inside
        the given project by using HTTP response codes.
      operationId: hasAnyPermissionInProject
      parameters:
      - explode: true
        in: query
        name: permissions
        required: true
        schema:
          items:
            maxLength: 20
            type: string
          type: array
        style: form
      - explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - explode: true
        in: query
        name: auth0UserId
        required: true
        schema:
          maxLength: 64
          type: string
        style: form
      responses:
        "200":
          description: OK
        "403":
          description: The user does not have the required role
      security:
      - user_auth: []
      summary: Check if the user has this permission in the project.
      tags:
      - project
      x-accepts: application/json
      x-tags:
      - tag: project
components:
  schemas:
    readProjectIdsByMembership_200_response:
      example:
        contents:
        - 0
        - 0
      properties:
        contents:
          items:
            format: int64
            type: integer
          type: array
      type: object
  securitySchemes:
    user_auth:
      flows:
        implicit:
          authorizationUrl: https://event-planner-dev.eu.auth0.com
          scopes:
            restapi:access: General access to the REST api.
      type: oauth2
