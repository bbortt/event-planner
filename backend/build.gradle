import org.flywaydb.gradle.task.FlywayCleanTask
import org.flywaydb.gradle.task.FlywayMigrateTask

plugins {
    id "java"
    id "org.springframework.boot"
    id "org.flywaydb.flyway"
    id "jacoco"
}

group = "io.github.bbortt.event.planner.backend"
description = "Event Planning Tool - Monolithic Backend."

defaultTasks "bootRun"

bootRun {
    main = "io.github.bbortt.event.planner.backend.BackendApp"
}

dependencies {
    annotationProcessor "org.glassfish.jaxb:jaxb-runtime:${jaxbRuntimeVersion}"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"

    implementation platform("tech.jhipster:jhipster-dependencies:${jhipsterDependenciesVersion}")

    // Use ", version: jhipsterDependenciesVersion, changing: true" if you want
    // to use a SNAPSHOT release instead of a stable release
    implementation group: "tech.jhipster", name: "jhipster-framework"

    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"
    implementation "io.dropwizard.metrics:metrics-core"
    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "org.apache.commons:commons-lang3"
    implementation "org.postgresql:postgresql"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.cloud:spring-cloud-starter"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-hystrix"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-data"
    implementation "org.springframework.security:spring-security-web"
    implementation "org.zalando:problem-spring-web"

    testImplementation "com.tngtech.archunit:archunit-junit5-api:${archunitJunit5Version}"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "org.springframework.security:spring-security-test"

    testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:${archunitJunit5Version}"
}

task flywayCleanIntegrationTest(type: FlywayCleanTask) {
    url = "${flyway_it_jdbc_url}"
    user = "${flyway_it_user}"
    password = "${flyway_it_password}"
}
flywayCleanIntegrationTest.dependsOn test

task flywayMigrateIntegrationTest(type: FlywayMigrateTask) {
    url = "${flyway_it_jdbc_url}"
    user = "${flyway_it_user}"
    password = "${flyway_it_password}"
}
flywayMigrateIntegrationTest.dependsOn flywayCleanIntegrationTest
integrationTest.dependsOn flywayMigrateIntegrationTest
