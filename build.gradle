plugins {
    id "com.diffplug.spotless"
    id "com.github.andygoossens.gradle-modernizer-plugin"
    id "com.github.node-gradle.node"
    id "com.google.cloud.tools.jib"
    id "com.gorylenko.gradle-git-properties"
    id "eclipse"
    id "idea"
    id "io.spring.nohttp"
    id "jacoco"
    id "java"
    id "maven-publish"
    id "org.liquibase.gradle"
    id "org.openapi.generator"
    id "org.sonarqube"
    id "org.springframework.boot"
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}


group = "io.github.bbortt.event.planner"
version = "${version}"

description = "Event planning tool."

sourceCompatibility = "${javaVersion}"
targetCompatibility = "${javaVersion}"
assert System.properties["java.specification.version"] == "17" || "18" || "19"


wrapper {
    gradleVersion = "8.2.1"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/release" }
    //jhipster-needle-gradle-repositories - JHipster will add additional repositories
}


if (project.hasProperty("prod") || project.hasProperty("gae")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}
if (project.hasProperty("podman")) {
    apply from: "gradle/profile_podman.gradle"
}


defaultTasks "bootRun"

springBoot {
    mainClass = "io.github.bbortt.event.planner.EventPlannerApp"
}


dependencies {
    // import JHipster dependencies BOM
    if (!project.hasProperty("gae")) {
        implementation platform("tech.jhipster:jhipster-dependencies:${jhipsterDependenciesVersion}")
    }

    // Use ", version: jhipsterDependenciesVersion, changing: true" if you want
    // to use a SNAPSHOT release instead of a stable release
    implementation "tech.jhipster:jhipster-framework"
    implementation "jakarta.annotation:jakarta.annotation-api"
    implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate6"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:testcontainers"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-api"
    implementation "com.zaxxer:HikariCP"
    implementation "org.apache.commons:commons-lang3"
    implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullableVersion}"
    implementation "com.github.ben-manes.caffeine:caffeine"
    annotationProcessor "org.hibernate.orm:hibernate-jpamodelgen:${hibernateVersion}"
    implementation "org.hibernate.orm:hibernate-core"
    implementation "org.hibernate.validator:hibernate-validator"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-loader-tools"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    testImplementation "org.testcontainers:jdbc"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "org.springframework.boot:spring-boot-starter-web"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation("com.tngtech.archunit:archunit-junit5-api:${archunitJunit5Version}") {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    testRuntimeOnly("com.tngtech.archunit:archunit-junit5-engine:${archunitJunit5Version}") {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-websocket"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
    implementation "org.springframework.security:spring-security-data"
    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "io.dropwizard.metrics:metrics-core"
    implementation "org.springframework.security:spring-security-messaging"
    // jhipster-needle-gradle-dependency - JHipster will add additional dependencies here
}

compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
}


eclipse {
    sourceSets {
        main {
            java {
                srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
            }
        }
    }
}

checkstyle {
    toolVersion "${checkstyleVersion}"
    configFile file("checkstyle.xml")
    checkstyleTest.enabled = false
}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

tasks.withType(com.gorylenko.GenerateGitPropertiesTask).configureEach {
    outputs.doNotCacheIf("Task is always executed") { true }
}

modernizer {
    failOnViolations = true
    includeTestClasses = true
}

nohttp {
    source.include "build.gradle", "README.md"
}

spotless {
    java {
        target 'src/*/java/**/*.java'
        removeUnusedImports()
    }
}


if (project.hasProperty("gae")) {
    task createPom {
        def basePath = 'build/resources/main/META-INF/maven'
        doLast {
            pom {
                withXml(dependencyManagement.pomConfigurer)
            }.writeTo("${basePath}/${project.group}/${project.name}/pom.xml")
        }
    }
    bootJar.dependsOn = [createPom]
}


task openApiGenerateBackend(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "spring"
    inputSpec = "$rootDir/src/main/resources/swagger/api.yml".toString()
    outputDir = "$buildDir/openapi".toString()
    apiPackage = "io.github.bbortt.event.planner.web.api"
    modelPackage = "io.github.bbortt.event.planner.service.api.dto"
    apiFilesConstrainedTo = [""]
    modelFilesConstrainedTo = [""]
    supportingFilesConstrainedTo = ["ApiUtil.java"]
    configOptions = [
        delegatePattern: "true",
        useOptional    : "true",
        useSpringBoot3 : "true",
        useTags        : "true",
        title          : "eventplanner"
    ]
    validateSpec = true
    importMappings = [Problem:"org.springframework.http.ProblemDetail"]
}

task openApiGenerateFrontend(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "typescript-angular"
    inputSpec = "$rootDir/src/main/resources/swagger/api.yml".toString()
    outputDir = "$rootDir/src/main/webapp/app/api".toString()
    validateSpec = true
}

task cleanApi(type: Delete) {
    delete fileTree("${rootDir}/src/main/webapp/app/api") {
        include "**/*"
        exclude "**/*.spec.ts"
    }
}
clean.dependsOn cleanApi

sourceSets {
    main {
        java {
            srcDir file("${project.buildDir.path}/openapi/src/main/java")
        }
    }
}

compileJava.dependsOn "openApiGenerateBackend"
compileJava.dependsOn "openApiGenerateFrontend"


test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"
    testLogging {
        events "FAILED", "SKIPPED"
    }
    jvmArgs += "-Djava.security.egd=file:/dev/./urandom -Xmx512m"
    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.required = false
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task integrationTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn integrationTest
}

check.dependsOn integrationTest


node {
    version = "18.18.2"
    npmVersion = "9.8.1"
    download = project.hasProperty("nodeInstall")
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

task webapp_test(type: NpmTask) {
    inputs.property('appVersion', project.version)
    inputs.files("package-lock.json")
        .withPropertyName('package-lock')
        .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.files("build.gradle")
        .withPropertyName('build.gradle')
        .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.files("angular.json")
        .withPropertyName('angular.json')
        .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.files("tsconfig.json", "tsconfig.app.json")
        .withPropertyName("tsconfig")
        .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.dir("webpack/")
        .withPropertyName("webpack/")
        .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.dir("src/main/webapp/")
        .withPropertyName("webapp-source-dir")
        .withPathSensitivity(PathSensitivity.RELATIVE)

    outputs.dir("build/test-results/jest/")
        .withPropertyName("jest-result-dir")
    outputs.file("build/test-results/TESTS-results-jest.xml")
        .withPropertyName("jest-result")
    outputs.file("build/test-results/clover.xml")
        .withPropertyName("clover-result")

    dependsOn npmInstall,compileTestJava
    args = ["run", "webapp:test"]
}


if (project.hasProperty("nodeInstall")) {
    node {
        version = "20.10.0"
        npmVersion = "10.2.3"
        download = true
    }

    // Copy local node and npm to a fixed location for npmw
    def fixedNode = tasks.register("fixedNode", Copy) {
        from nodeSetup
        into 'build/node'
    }
    tasks.named("nodeSetup").configure { finalizedBy fixedNode }

    def fixedNpm = tasks.register("fixedNpm", Copy) {
        from npmSetup
        into 'build/node'
    }
    tasks.named("npmSetup").configure { finalizedBy fixedNpm }
}

test.dependsOn webapp_test


apply from: "gradle/cache.gradle"
apply from: "gradle/docker.gradle"
apply from: "gradle/liquibase.gradle"
apply from: "gradle/sonar.gradle"
//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here
