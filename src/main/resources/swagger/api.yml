openapi: '3.0.1'
info:
  title: 'Event Planner'
  version: 0.0.1
servers:
  - url: http://localhost:8080/api/rest
    description: Development server
  - url: https://localhost:8080/api/rest
    description: Development server with TLS Profile
tags:
  - name: project
    description: Resource controlling projects.
  - name: project-location
    description: Resource controlling locations inside a Project.
  - name: project-member
    description: Resource controlling memberships inside a Project.
paths:
  /v1/projects:
    get:
      tags:
        - project
      security:
        - oauth
        - openid
      summary: Receive all projects to which the user has access to.
      description: |
        Return all projects to which the user has access to. E.g. he has either created the Project or received an
        invitation to it. This will only return projects that are not archived.
      operationId: getUserProjects
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/Sort'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
          headers:
            Has-Next-Page:
              $ref: '#/components/headers/hasNextPage'
  /v1/projects/token/{projectToken}:
    get:
      tags:
        - project
      security:
        - oauth
        - openid
      summary: Find the Project matching the given token.
      description: |
        Find the Project matching the given token or fail if this Project does not exist.
      operationId: findProjectByToken
      parameters:
        - name: projectToken
          in: path
          description: |
            The restricting Project token.
          schema:
            type: string
            maxLength: 36
            minLength: 36
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        404:
          description: Not Found
  /v1/projects/{projectId}/locations:
    get:
      tags:
        - project-location
        - project
      security:
        - oauth
        - openid
      summary: List all Locations of the Project.
      description: |
        Return all Locations of the given Project by id. **Beware:** This
        endpoint does not implement any pagination!
      operationId: getProjectLocations
      parameters:
        - name: projectId
          in: path
          description: |
            The restricting Project id.
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Location'
        404:
          description: Not Found
  /v1/projects/{projectId}/locations/{locationId}/allInProjectExceptThis:
    get:
      tags:
        - project-location
        - project
      security:
        - oauth
        - openid
      summary: List Locations of the Project, except this one.
      description: |
        Return all Locations of the given Project by id, except the one
        given by id and any of its children. This endpoint must be used
        in order to retrieve possible new parents when editing a
        location. **Beware:** This endpoint does not implement any
        pagination!
      operationId: getProjectLocationsWithoutSelf
      parameters:
        - name: projectId
          in: path
          description: |
            The restricting Project id.
          schema:
            type: integer
            format: int64
          required: true
        - name: locationId
          in: path
          description: |
            The restricting Location id.
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Location'
        404:
          description: Not Found
  /v1/projects/{projectId}/members:
    get:
      tags:
        - project-member
        - project
      security:
        - oauth
        - openid
      summary: List all members collaborating on the Project.
      description: |
        Return all members invited to the given Project by id.
      operationId: getProjectMembers
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/Sort'
        - name: projectId
          in: path
          description: |
            The restricting Project id.
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Member'
          headers:
            link:
              $ref: '#/components/headers/link'
            x-total-count:
              $ref: '#/components/headers/xTotalCount'
        404:
          description: Not Found
    post:
      tags:
        - project-member
        - project
      security:
        - oauth
        - openid
      summary: Invite a new Member to collaborate on the Project.
      description: |
        Invite a new Member to collaborate on the Project based on its email
        address. An invitation for the particular Project will be sent to the
        use. He can join the Project using an existing account and the sent link.
      operationId: inviteMemberToProject
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                required:
                  - email
                properties:
                  email:
                    type: string
                    format: email
                    maxLength: 191
                    minLength: 1
                    description: The email to which the invitation will be sent.
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Member'
        400:
          description: Bad Request
        404:
          description: Not Found
  /v1/projects/{projectId}/members/email/{invitedEmail}:
    get:
      tags:
        - project-member
        - project
      security:
        - oauth
        - openid
      summary: Find the Project Member matching the given invitedEmail.
      description: |
        Find the Member matching the given invitedEmail in the Project identified by id. Fail if this Project or Member does not exist.
      operationId: findProjectMemberByTokenAndEmail
      parameters:
        - name: projectId
          in: path
          description: |
            The restricting Project id.
          schema:
            type: integer
            format: int64
          required: true
        - name: invitedEmail
          in: path
          description: |
            The restricting Member invitedEmail.
          schema:
            type: string
            maxLength: 191
            minLength: 1
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        404:
          description: Not Found
components:
  parameters:
    PageSize:
      name: pageSize
      in: query
      description: |
        Number of records to return. Must be greater than 0, else the default value of 10 will be used.
      schema:
        type: integer
        format: Int32
    PageNumber:
      name: pageNumber
      in: query
      description: Start index for paging, 1-based.
      schema:
        type: integer
        format: Int32
    Sort:
      name: sort
      in: query
      description: |
        Attributes of the resource to sort by. Each attribute can optionally be followed by the sorting direction,
        comma separated. Default is `id[,asc]`.
      schema:
        type: array
        items:
          type: string
  responses:
    Problem:
      description: |
        An error occurred - see status code and problem object for more information.
      content:
        'application/problem+json':
          schema:
            $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
  headers:
    hasNextPage:
      schema:
        type: boolean
      description: If a next page is available.
    link:
      schema:
        type: string
      description: The navigation links.
      example: <http://localhost:9000/api/members?eagerload=true&sort=id%2Casc&page=0&size=20>; rel="last",<http://localhost:9000/api/members?eagerload=true&sort=id%2Casc&page=0&size=20>; rel="first"
    xTotalCount:
      schema:
        type: integer
        format: int64
      description: Total amount of pages.
  schemas:
    Location:
      type: object
      required:
        - id
        - name
        - children
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 63
          minLength: 1
        description:
          type: string
          maxLength: 255
          minLength: 1
        children:
          type: array
          items:
            $ref: '#/components/schemas/Location'
    Member:
      type: object
      required:
        - id
        - email
        - createdBy
        - createdDate
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          format: email
          maxLength: 191
          minLength: 1
        createdBy:
          type: string
          format: email
          maxLength: 50
          minLength: 1
        createdDate:
          type: string
          format: date-time
        accepted:
          type: boolean
        acceptedDate:
          type: string
          format: date-time
        login:
          type: string
          maxLength: 50
          minLength: 1
        firstName:
          type: string
          maxLength: 50
        lastName:
          type: string
          maxLength: 50
        imageUrl:
          type: string
          maxLength: 256
    Project:
      type: object
      required:
        - name
        - token
        - startDate
        - endDate
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 50
          minLength: 1
        description:
          type: string
          maxLength: 300
        token:
          type: string
          maxLength: 36
          minLength: 36
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        archived:
          type: boolean
  securitySchemes:
    oauth:
      type: oauth2
      description: OAuth2 authentication with KeyCloak
      flows:
        authorizationCode:
          authorizationUrl: http://localhost:9080/realms/jhipster/protocol/openid-connect/auth
          tokenUrl: http://localhost:9080/realms/jhipster/protocol/openid-connect/token
          scopes:
            jhipster: Jhipster specific claims
            email: Email claims
            profile: Profile claims
    openId:
      type: openIdConnect
      description: OpenID Connect authentication with KeyCloak
      openIdConnectUrl: http://localhost:9080/realms/jhipster/.well-known/openid-configuration
security:
  - oauth: [openid, profile, email, offline_access]
  - openId: [openid, profile, email, offline_access]
